// <auto-generated />
using System;
using BrewHelper.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrewHelper.Data.Migrations
{
    [DbContext(typeof(BrewhelperContext))]
    [Migration("20220225111535_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Equipment", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Batch_Size")
                        .HasColumnType("float");

                    b.Property<double>("Boil_Size")
                        .HasColumnType("float");

                    b.Property<double?>("Boil_Time")
                        .HasColumnType("float");

                    b.Property<bool?>("Calc_Boil_Volume")
                        .HasColumnType("bit");

                    b.Property<string>("Display_Batch_Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Boil_Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Lauter_Deadspace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Top_Up_Kettle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Top_Up_Water")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Trub_Chiller_Loss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Tun_Volume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Tun_Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Evap_Rate")
                        .HasColumnType("float");

                    b.Property<bool?>("Hop_Utilization")
                        .HasColumnType("bit");

                    b.Property<double?>("Lauter_Deadspace")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Top_Up_Kettle")
                        .HasColumnType("float");

                    b.Property<double?>("Top_Up_Water")
                        .HasColumnType("float");

                    b.Property<double?>("Trub_Chiller_Loss")
                        .HasColumnType("float");

                    b.Property<double?>("Tun_Specific_Heat")
                        .HasColumnType("float");

                    b.Property<double?>("Tun_Volume")
                        .HasColumnType("float");

                    b.Property<double?>("Tun_Weight")
                        .HasColumnType("float");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Name", "Version");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Fermentable", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool?>("Add_After_Boil")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("Coarse_Fine_Diff")
                        .HasColumnType("float");

                    b.Property<double>("Color")
                        .HasColumnType("float");

                    b.Property<double?>("Diastatic_Power")
                        .HasColumnType("float");

                    b.Property<string>("Display_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Ibu_Gal_Per_Lb")
                        .HasColumnType("float");

                    b.Property<string>("Inventory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Max_In_Batch")
                        .HasColumnType("float");

                    b.Property<double?>("Moisture")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Potential")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<bool?>("Recommended_Mash")
                        .HasColumnType("bit");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Yield")
                        .HasColumnType("float");

                    b.HasKey("Name", "Version");

                    b.ToTable("Fermentables");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Hop", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Alpha")
                        .HasColumnType("float");

                    b.Property<double?>("Beta")
                        .HasColumnType("float");

                    b.Property<double?>("Caryophyllene")
                        .HasColumnType("float");

                    b.Property<double?>("Cohumulone")
                        .HasColumnType("float");

                    b.Property<string>("Display_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Form")
                        .HasColumnType("int");

                    b.Property<double?>("HSI")
                        .HasColumnType("float");

                    b.Property<double?>("Humulene")
                        .HasColumnType("float");

                    b.Property<string>("Inventory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Myrcene")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Substitutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Use")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Name", "Version");

                    b.ToTable("Hops");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Misc", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool?>("Amount_Is_Weight")
                        .HasColumnType("bit");

                    b.Property<string>("Display_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inventory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Use")
                        .HasColumnType("int");

                    b.Property<string>("Use_For")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name", "Version");

                    b.ToTable("Miscs");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Style", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("ABV_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Abv_Max")
                        .HasColumnType("float");

                    b.Property<double?>("Abv_Min")
                        .HasColumnType("float");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double?>("Carb_Max")
                        .HasColumnType("float");

                    b.Property<double?>("Carb_Min")
                        .HasColumnType("float");

                    b.Property<string>("Carb_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Color_Max")
                        .HasColumnType("float");

                    b.Property<double>("Color_Min")
                        .HasColumnType("float");

                    b.Property<string>("Color_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Color_Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Color_Min")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_FG_Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_FG_Min")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_OG_Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_OG_Min")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FG_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IBU_Max")
                        .HasColumnType("float");

                    b.Property<double>("IBU_Min")
                        .HasColumnType("float");

                    b.Property<string>("IBU_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OG_Max")
                        .HasColumnType("float");

                    b.Property<double>("OG_Min")
                        .HasColumnType("float");

                    b.Property<string>("OG_Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Style_Guide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Style_Letter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Name", "Version");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Water", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Bicarbonate")
                        .HasColumnType("float");

                    b.Property<double>("Calcium")
                        .HasColumnType("float");

                    b.Property<double>("Chloride")
                        .HasColumnType("float");

                    b.Property<string>("Display_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Magnesium")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PH")
                        .HasColumnType("float");

                    b.Property<double>("Sodium")
                        .HasColumnType("float");

                    b.Property<double>("Sulfate")
                        .HasColumnType("float");

                    b.HasKey("Name", "Version");

                    b.ToTable("Water");
                });

            modelBuilder.Entity("BeerXMLSharp.OM.Records.Yeast", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool?>("Add_To_Secondary")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInvalidSerialization")
                        .HasColumnType("bit");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool?>("Amount_Is_Weight")
                        .HasColumnType("bit");

                    b.Property<double?>("Attenuation")
                        .HasColumnType("float");

                    b.Property<string>("Best_For")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Max_Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display_Min_Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Flocculation")
                        .HasColumnType("int");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<string>("Inventory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Laboratory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Max_Reuse")
                        .HasColumnType("int");

                    b.Property<double?>("Max_Temperature")
                        .HasColumnType("float");

                    b.Property<double?>("Min_Temperature")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Times_Cultured")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Name", "Version");

                    b.ToTable("Yeasts");
                });

            modelBuilder.Entity("BrewHelper.Data.Entities.BrewHelperRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeXml")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
